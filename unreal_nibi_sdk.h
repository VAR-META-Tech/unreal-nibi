/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "api.go"

#include <stdint.h> // for uint32_t

// If crypto.Address and crypto.PubKey are fixed-size byte arrays, define their sizes
#define ADDRESS_SIZE 20 // Example size, adjust according to actual crypto.Address size
#define PUBKEY_SIZE  58 // Example size, adjust according to actual crypto.PubKey size

// Define a C-compatible KeyInfo struct
typedef struct {
	uint32_t Type;
	const char* Name;
	const uint8_t PubKey[PUBKEY_SIZE];
	const uint8_t Address[ADDRESS_SIZE];
} KeyInfo;

typedef struct {
	KeyInfo* Info;
	char* Password;
} UserAccount;

// Define the Coin type in C, assuming both Denom and Amount are strings
typedef struct {
    char *Denom;
    uint64_t Amount;
} Coin;

// If Coins is a dynamic array or slice of Coin, you will need a struct to represent it
typedef struct {
    Coin *Array;     // Pointer to the first Coin element
    size_t Length;   // Number of elements in the Coins array
} Coins;

// Then define the BaseAccount struct in C
typedef struct {
    uint8_t Address[ADDRESS_SIZE];
    Coins*   Coins;              // Assuming Coins is represented as above
    uint8_t PubKey[PUBKEY_SIZE];
    uint64_t AccountNumber;
    uint64_t Sequence;
} BaseAccount;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// SwitchNetwork changes the network configuration based on the provided network name.
// It returns Success (0) if the switch is successful, otherwise Fail (1).
//
extern int SwitchNetwork(char* network);

// QueryAccount retrieves detailed account information given a blockchain address and returns a C-compatible structure.
//
extern BaseAccount* QueryAccount(char* address);

// NewNibiruClientDefault initializes a new Nibiru client using default network settings.
// It returns Success if the client is successfully initialized, otherwise Fail.
//
extern int NewNibiruClientDefault();

// NewNibiruClient initializes a new Nibiru client based on the provided chain ID, gRPC, and RPC endpoints.
// It returns Success if the client initialization is successful, otherwise Fail.
//
extern int NewNibiruClient(char* chainId, char* grpcEndpoint, char* rpcEndpoint);

// GenerateRecoveryPhrase creates a new BIP39 mnemonic recovery phrase.
// It returns a pointer to a C string containing the mnemonic, or an empty string on failure.
//
extern char* GenerateRecoveryPhrase();

// CreateAccount creates a new blockchain account using the provided mnemonic, key name, and passphrase.
// It returns Success if the account creation is successful, otherwise Fail.
//
extern int CreateAccount(char* keyname, char* mnemonic, char* passphrase);

// GetPrivKeyFromMnemonic retrieves a private key from a given mnemonic and key name,
// returning a pointer to the private key data in a C-compatible format.
//
extern uint8_t* GetPrivKeyFromMnemonic(char* mnemonic, char* keyName);

// GetAddressFromKeyName retrieves the blockchain address associated with a given key name.
// It returns the address as a C string or nil if an error occurs.
//
extern char* GetAddressFromKeyName(char* keyName);

// ImportAccountFromPrivateKey imports an account using a private key and associates it with a given key name.
// It returns Success if the import is successful, otherwise Fail.
//
extern int ImportAccountFromPrivateKey(uint8_t* privateKey, char* keyName);
extern KeyInfo** GetListAccount(int* length);

// GetAccountByKeyName retrieves account information by key name and returns it as a C.KeyInfo struct.
//
extern KeyInfo* GetAccountByKeyName(char* keyName);

// GetAccountByAddress retrieves account information based on the blockchain address and returns it as a C.KeyInfo struct.
//
extern KeyInfo* GetAccountByAddress(char* addr);

// HasKeyByName checks if a key with the specified name exists in the keyring.
// It returns Success if the key exists, otherwise Fail.
//
extern int HasKeyByName(char* name);

// HasKeyByAddress checks if a key corresponding to the given address exists in the keyring.
// It returns Success if the key exists, otherwise Fail.
//
extern int HasKeyByAddress(char* addr);

// DeleteAccount removes an account from the keyring based on the given key name.
//
extern int DeleteAccount(char* keyName, char* password);

// TransferToken transfers specified amount of tokens from one address to another.
// It returns Success if the transaction is successful, otherwise Fail.
//
extern char* TransferToken(char* fromAddress, char* toAddress, char* denom, int amount);

// ExecuteWasmContract executes a smart contract on the blockchain using the specified parameters.
// It returns a pointer to a C string containing the transaction hash, or nil if an error occurs.
//
extern char* ExecuteWasmContract(char* senderAddress, char* contractAddress, char* executeMsg, char* denom, int amount);

// QueryWasmContract queries the state of a Wasm smart contract using a contract address and a query message.
// It returns a pointer to a C string containing the query response or nil if an error occurs.
//
extern char* QueryWasmContract(char* contractAddress, char* queryMsg);

// QueryTXHash retrieves the transaction details corresponding to a given transaction hash.
// It returns a pointer to a C string containing the transaction log, or nil on failure.
//
extern char* QueryTXHash(char* txHash);

#ifdef __cplusplus
}
#endif
